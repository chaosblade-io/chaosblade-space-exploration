1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Values.namespace | default "chaosblade" }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "chaosblade-space-exploration.fullname" . }}-task-resource)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Values.namespace | default "chaosblade" }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Values.namespace | default "chaosblade" }} svc -w {{ include "chaosblade-space-exploration.fullname" . }}-task-resource'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Values.namespace | default "chaosblade" }} {{ include "chaosblade-space-exploration.fullname" . }}-task-resource --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.ports.taskResource }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Values.namespace | default "chaosblade" }} -l "app.kubernetes.io/name={{ include "chaosblade-space-exploration.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Values.namespace | default "chaosblade" }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Values.namespace | default "chaosblade" }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Health check endpoints:
{{- range $serviceName, $serviceConfig := .Values.services }}
{{- if $serviceConfig.enabled }}
  - {{ $serviceName }}: http://{{ include "chaosblade-space-exploration.fullname" $ }}-{{ $serviceName }}:{{ index $.Values.service.ports $serviceName }}/actuator/health
{{- end }}
{{- end }}

3. Service endpoints:
{{- range $serviceName, $serviceConfig := .Values.services }}
{{- if $serviceConfig.enabled }}
  - {{ $serviceName }}: http://{{ include "chaosblade-space-exploration.fullname" $ }}-{{ $serviceName }}:{{ index $.Values.service.ports $serviceName }}
{{- end }}
{{- end }}

4. Check the status of your deployment:
  kubectl get pods --namespace {{ .Values.namespace | default "chaosblade" }} -l "app.kubernetes.io/name={{ include "chaosblade-space-exploration.name" . }},app.kubernetes.io/instance={{ .Release.Name }}"

5. View logs:
{{- range $serviceName, $serviceConfig := .Values.services }}
{{- if $serviceConfig.enabled }}
  kubectl logs --namespace {{ $.Values.namespace | default "chaosblade" }} -l "app.kubernetes.io/component={{ $serviceName }}" -f
{{- end }}
{{- end }}

6. Database connection:
{{- if .Values.database.host }}
  Database connection details:
  - Host: {{ .Values.database.host }}
  - Port: {{ .Values.database.port }}
  - Database: {{ .Values.database.name }}
  - Username: {{ .Values.database.username }}
{{- else }}
  Please ensure you have an external database instance configured.
{{- end }}

7. Redis connection:
{{- if .Values.redis.enabled }}
  Redis is deployed as part of this chart. Connection details:
  - Host: {{ include "chaosblade-space-exploration.fullname" . }}-redis-master
  - Port: 6379
{{- if .Values.redis.auth.enabled }}
  - Password: {{ .Values.redis.auth.password }}
{{- end }}
{{- else }}
  Please ensure you have an external Redis instance configured.
{{- end }}

8. Kubernetes API access:
  The services require access to the Kubernetes API server for:
  - svc-reqrsp-proxy: Pod management, ConfigMap operations, Deployment patching
  - svc-fault-scheduler: ChaosBlade CRD management
  Make sure the service account has the necessary RBAC permissions.

9. Troubleshooting:
  - Check pod logs: kubectl logs -f <pod-name> -n {{ .Values.namespace | default "chaosblade" }}
  - Check service status: kubectl get svc -n {{ .Values.namespace | default "chaosblade" }}
  - Check ingress status: kubectl get ingress -n {{ .Values.namespace | default "chaosblade" }}
  - Check RBAC: kubectl get clusterrole,clusterrolebinding | grep {{ include "chaosblade-space-exploration.fullname" . }}
